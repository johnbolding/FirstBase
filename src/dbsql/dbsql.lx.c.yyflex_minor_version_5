/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
static yyconst short int yy_accept[391] =
    {   0,
        0,    0,    0,    0,   80,   78,   77,   76,   74,   78,
        3,   75,   74,   78,   73,   74,   73,   60,   61,   74,
       74,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   74,   75,   64,    2,    1,   68,    0,   65,
        0,   67,    0,   66,    0,    0,   64,   63,    0,   64,
       62,   61,   70,   69,   71,   64,   64,   64,    7,   64,
       64,   11,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   21,   24,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   30,   31,   32,
       64,   64,   64,   64,   64,   64,   64,   37,   64,   64,
       64,   64,   64,   64,   64,   64,    7,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   21,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   32,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   72,   63,    0,   64,
       62,   43,    4,    5,    6,    8,    9,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   58,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   26,   27,
       64,   28,   64,   53,   64,   64,   64,   64,   64,   64,
       64,   36,   64,   64,   57,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   14,   64,   16,   54,   64,
       64,   64,   18,   64,   64,   64,   64,   23,   64,   64,
       25,   64,   59,   29,   64,   64,   64,   64,   64,   35,
       64,   64,   64,   64,   64,   38,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   12,   64,   64,   64,   64,   64,   19,
       64,   64,   22,   44,   64,   48,   33,   56,   40,   41,
       64,   64,   64,   64,   42,   47,   39,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   13,   64,   17,   52,   64,   20,   51,   45,   34,
       64,   46,   64,   64,   64,   64,   64,   64,   10,   64,
       64,   49,   55,   64,   64,   15,   64,   64,   50,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,    8,   21,   22,
       23,   24,    8,    8,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   45,   46,   47,   48,   34,
       49,   50,   51,   52,   53,    8,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   34,   63,   64,   65,   66,
       67,   68,   34,   69,   70,   71,   72,   73,   74,   75,
       76,   34,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    3,    3,    3,
        2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[395] =
    {   0,
        0,    0,  814,  813,  815,  818,  818,  818,  791,   75,
      818,  818,  803,   71,  818,  818,   65,  794,   68,   66,
      788,   69,   74,   76,   75,   73,   88,   91,   94,   92,
      792,  108,  110,  113,  118,  121,  122,  124,  126,  133,
       80,  137,  120,  127,  132,  136,  140,  152,  156,  153,
      144,  162,  169,  160,  171,  159,  174,  177,  179,  188,
      190,  161,  818,  731,  790,  818,  818,  818,  211,  818,
        0,  818,  189,  818,    0,  788,  788,  785,   78,  786,
      783,   81,  818,  818,  818,  170,  173,  215,  220,  165,
      216,  784,  158,  233,  224,  236,  237,  239,  240,  242,

      246,  247,  249,  251,  252,  254,  783,  253,  256,  266,
      262,  268,  269,  271,  273,  274,  272,  782,  781,  275,
      280,  277,  284,  286,  287,  288,  291,  780,  293,  299,
      164,  301,  302,  294,  295,  303,  311,  308,  314,  316,
      317,  320,  321,  322,  318,  324,  325,  326,  323,  328,
      327,  329,  330,  343,  331,  333,  332,  334,  336,  347,
      337,  335,  348,  353,  345,  338,  344,  339,  352,  359,
      351,  354,  356,  355,  360,  364,  818,  777,  777,  777,
      774,  775,  774,  773,  772,  771,  770,  389,  401,  402,
      407,  397,  410,  411,  412,  413,  414,  415,  769,  340,

      420,  418,  419,  423,  426,  427,  439,  441,  768,  767,
      442,  766,  425,  765,  445,  446,  447,  429,  448,  451,
      454,  764,  455,  460,  763,  463,  461,  464,  466,  467,
      468,  469,  424,  470,  471,  473,  475,  476,  479,  481,
      483,  482,  484,  485,  490,  491,  492,  496,  497,  493,
      498,  500,  501,  494,  503,  505,  502,  508,  509,  506,
      488,  499,  518,  486,  531,  754,  495,  752,  751,  549,
      551,  552,  750,  553,  558,  555,  559,  748,  561,  560,
      747,  563,  744,  743,  567,  568,  569,  570,  572,  741,
      582,  571,  576,  584,  577,  738,  587,  565,  573,  589,

      594,  595,  599,  602,  601,  604,  606,  603,  607,  608,
      611,  612,  613,  614,  610,  609,  615,  616,  618,  617,
      619,  627,  620,  735,  621,  624,  633,  622,  625,  734,
      623,  635,  731,  730,  666,  729,  728,  727,  726,  723,
      650,  656,  668,  671,  721,  720,  717,  634,  637,  630,
      629,  628,  641,  672,  673,  682,  683,  684,  686,  687,
      688,  716,  689,  715,  713,  690,  712,  711,  517,  516,
      692,  514,  693,  694,  695,  699,  705,  706,  513,  697,
      700,  512,  363,  702,  707,  163,  709,  710,   84,  818,
      773,  775,  777,   97

    } ;

static yyconst short int yy_def[395] =
    {   0,
      390,    1,  391,  391,  390,  390,  390,  390,  390,  392,
      390,  390,  390,  393,  390,  390,  390,  394,  390,  390,
      390,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  390,  390,  394,  390,  390,  390,  392,  390,
      392,  390,  393,  390,  393,  390,  394,  390,  390,  394,
      390,  390,  390,  390,  390,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  390,  390,  390,  394,
      390,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,    0,
      390,  390,  390,  390

    } ;

static yyconst short int yy_nxt[899] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,   12,   13,
       14,   15,   15,   12,   12,   15,   16,   17,   18,   19,
       15,   20,   12,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   31,   31,   15,    6,
       15,   12,    6,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   31,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   31,   31,   63,   64,   63,   65,
       70,   74,   76,   77,   78,   81,   79,   82,   83,   84,
       79,   79,   79,   79,   86,  179,  180,   79,   81,   80,

       82,   79,   91,   95,   87,   79,   88,   96,   79,   79,
       89,   79,  132,   90,   93,   97,   94,   98,  104,   99,
       75,   92,  105,  102,   71,   79,  100,   79,  101,  106,
       79,  103,  108,  107,  112,   79,  109,   79,   79,   79,
      110,   79,  113,   79,   79,  117,  111,  118,  114,   79,
       79,  115,  124,   79,   79,  119,  116,   79,  120,  122,
      123,   79,  125,  121,  128,  130,  129,  126,  133,   79,
       79,  127,  131,   79,  134,   79,   79,   79,   79,   79,
       79,   79,   79,  135,  139,  136,   79,   79,   79,  137,
       79,   79,  138,  142,   79,  187,   79,  143,  140,   74,

      141,  189,   92,  226,  144,   79,  151,   79,  183,  153,
      152,  182,  145,  107,  146,  154,   70,  149,  147,  155,
      148,  176,  158,  156,  150,  166,  161,  163,  157,  118,
      159,  162,   79,   79,  168,  160,  119,   79,   75,  164,
      167,   79,  184,  169,  165,  128,  186,  172,  170,  173,
       79,  175,  171,   79,   79,  174,   79,   79,  188,   79,
       71,  190,  185,   79,   79,  191,   79,  194,   79,   79,
       79,   79,  195,   79,  199,  193,  202,  192,  205,   79,
      196,  203,  197,   79,  198,   79,   79,  200,   79,   79,
       79,   79,   79,  206,   79,  201,  204,   79,  211,  214,

      207,   79,  215,   79,   79,   79,  210,  208,   79,  213,
       79,   79,   79,  221,  209,  212,   79,  216,   79,   79,
       79,  219,  217,  220,  222,   79,  225,  218,   79,  227,
      228,   79,  223,   79,   79,   79,  224,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  183,  184,
       79,   79,   79,  182,   79,   79,  186,  187,   79,   79,
       79,   79,   79,   79,  231,  235,   79,   79,  185,  199,
       79,   79,  242,  274,  229,  236,  243,  230,  234,  232,
      233,  237,  239,  238,  240,  247,  246,  245,  250,  241,

      244,  210,  255,  249,  214,  248,   79,  212,  209,  251,
      252,  253,  225,  257,   79,  254,  256,  261,   79,   79,
      258,  262,  260,  222,   79,  259,  265,   79,   79,   79,
       79,   79,   79,  266,  263,   79,   79,   79,  264,  267,
       79,   79,   79,   79,   79,  276,   79,  277,  269,  268,
      272,  273,  275,  270,  279,  271,   79,  280,   79,   79,
      284,  278,   79,   79,   79,   79,  288,  281,   79,  282,
      283,   79,   79,  285,  286,  287,  289,   79,   79,  290,
       79,   79,  293,   79,   79,   79,   79,   79,   79,  291,
       79,  295,   79,   79,  301,  292,   79,  294,   79,   79,

       79,   79,   79,   79,  297,   79,  296,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,  300,   79,   79,  266,   79,   79,  326,  324,   79,
       79,   79,  299,   79,   79,   79,  269,  268,  307,  298,
      304,  308,  302,  273,  306,  303,  323,  309,   79,  281,
      310,  278,  305,  311,  283,  312,  284,  313,  314,  315,
      316,  296,  290,  321,  319,  317,   79,  322,   79,   79,
       79,  318,   79,  325,  320,   79,   79,   79,   79,  328,
       79,  329,   79,  332,   79,   79,   79,   79,   79,   79,
       79,  327,  330,   79,   79,  331,  334,  340,  341,   79,

      344,   79,  335,  336,   79,  333,   79,  337,  338,  339,
      345,   79,   79,  343,  342,  347,   79,  346,   79,   79,
       79,   79,  348,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  324,   79,   79,   79,   79,  361,  362,
       79,   79,   79,  367,   79,  350,  352,  366,   79,  349,
      353,  363,  365,  355,  357,  351,  340,   79,  330,  354,
      334,  360,  345,   79,  364,  368,  358,  333,  356,  336,
      337,  338,  339,   79,  347,   79,  359,  346,   79,   79,
       79,  374,  370,  371,  362,  375,  365,  369,  364,   79,

       79,   79,  376,   79,   79,   79,   79,   79,  372,   79,
       79,   79,   79,  373,   79,  380,   79,   79,  381,   79,
      382,  383,   79,   79,   79,  379,   79,   79,   79,   79,
       79,  367,   79,   79,   79,  387,  389,   79,   79,  386,
       79,  368,  369,   79,   79,   79,   79,   79,   79,  377,
      384,   79,   79,  370,  372,   79,  385,  378,   79,  379,
       79,   79,  382,  383,   79,   79,  389,   79,   79,   79,
      388,   79,  386,   66,   66,   66,   69,   69,   73,   73,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  181,   79,  180,  178,   79,   79,   79,

       79,   79,  181,   79,  178,   79,   77,   79,  177,   79,
       85,   79,   72,   68,  390,   67,   67,    5,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390

    } ;

static yyconst short int yy_chk[899] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       10,   14,   17,   17,   17,   19,   22,   19,   20,   20,
       26,   23,   25,   24,   22,   79,   79,   41,   82,  394,

       82,  389,   23,   25,   22,   27,   22,   25,   28,   30,
       22,   29,   41,   22,   24,   25,   24,   26,   29,   26,
       14,   23,   29,   28,   10,   32,   27,   33,   27,   30,
       34,   28,   32,   30,   33,   35,   32,   43,   36,   37,
       32,   38,   33,   39,   44,   35,   32,   35,   33,   45,
       40,   34,   38,   46,   42,   35,   34,   47,   35,   36,
       37,   51,   38,   35,   39,   40,   39,   38,   42,   48,
       50,   38,   40,   49,   43,   93,   56,   54,   62,   52,
      386,  131,   90,   43,   44,   43,   53,   86,   55,   43,
       87,   57,   43,   46,   58,   90,   59,   46,   45,   73,

       45,   93,   44,  131,   46,   60,   50,   61,   87,   51,
       50,   86,   47,   51,   47,   52,   69,   49,   48,   52,
       48,   62,   53,   52,   49,   56,   54,   55,   52,   55,
       53,   54,   88,   91,   58,   53,   55,   89,   73,   55,
       57,   95,   88,   58,   55,   59,   89,   59,   58,   60,
       94,   61,   58,   96,   97,   60,   98,   99,   91,  100,
       69,   94,   88,  101,  102,   95,  103,   98,  104,  105,
      108,  106,   99,  109,  102,   97,  105,   96,  108,  111,
      100,  106,  100,  110,  101,  112,  113,  103,  114,  117,
      115,  116,  120,  109,  122,  104,  106,  121,  114,  117,

      110,  123,  120,  124,  125,  126,  113,  111,  127,  116,
      129,  134,  135,  126,  112,  115,  130,  121,  132,  133,
      136,  124,  122,  125,  126,  138,  130,  123,  137,  132,
      133,  139,  127,  140,  141,  145,  129,  142,  143,  144,
      149,  146,  147,  148,  151,  150,  152,  153,  155,  157,
      156,  158,  162,  159,  161,  166,  168,  200,  135,  136,
      154,  167,  165,  134,  160,  163,  137,  138,  171,  169,
      164,  172,  174,  173,  141,  145,  170,  175,  136,  149,
      383,  176,  152,  200,  139,  146,  153,  140,  144,  142,
      143,  147,  148,  147,  150,  156,  155,  154,  162,  151,

      153,  159,  168,  160,  163,  157,  188,  161,  158,  164,
      165,  166,  173,  170,  192,  167,  169,  175,  189,  190,
      171,  176,  174,  170,  191,  172,  190,  193,  194,  195,
      196,  197,  198,  191,  188,  202,  203,  201,  189,  192,
      204,  233,  213,  205,  206,  202,  218,  203,  194,  193,
      197,  198,  201,  195,  205,  196,  207,  206,  208,  211,
      213,  204,  215,  216,  217,  219,  218,  207,  220,  208,
      211,  221,  223,  215,  216,  217,  219,  224,  227,  220,
      226,  228,  223,  229,  230,  231,  232,  234,  235,  221,
      236,  226,  237,  238,  233,  221,  239,  224,  240,  242,

      241,  243,  244,  264,  228,  261,  227,  245,  246,  247,
      250,  254,  267,  248,  249,  251,  262,  252,  253,  257,
      255,  231,  256,  260,  232,  258,  259,  267,  264,  382,
      379,  372,  230,  370,  369,  263,  235,  234,  242,  229,
      238,  243,  236,  239,  241,  237,  263,  245,  265,  247,
      246,  244,  240,  248,  249,  251,  250,  252,  253,  254,
      255,  261,  256,  260,  258,  257,  270,  262,  271,  272,
      274,  257,  276,  265,  259,  275,  277,  280,  279,  271,
      282,  272,  298,  276,  285,  286,  287,  288,  292,  289,
      299,  270,  274,  293,  295,  275,  279,  288,  289,  291,

      293,  294,  280,  282,  297,  277,  300,  285,  286,  287,
      294,  301,  302,  292,  291,  297,  303,  295,  305,  304,
      308,  306,  298,  307,  309,  310,  316,  315,  311,  312,
      313,  314,  317,  318,  320,  319,  321,  323,  325,  328,
      331,  326,  329,  299,  322,  352,  351,  350,  323,  325,
      327,  348,  332,  331,  349,  301,  303,  329,  353,  300,
      304,  326,  328,  307,  316,  302,  315,  341,  305,  306,
      309,  319,  320,  342,  327,  332,  317,  308,  310,  311,
      312,  313,  314,  335,  322,  343,  318,  321,  344,  354,
      355,  348,  341,  342,  349,  350,  352,  335,  351,  356,

      357,  358,  353,  359,  360,  361,  363,  366,  343,  371,
      373,  374,  375,  344,  380,  363,  376,  381,  366,  384,
      371,  373,  377,  378,  385,  361,  387,  388,  368,  367,
      365,  354,  364,  362,  347,  381,  387,  346,  345,  380,
      340,  355,  356,  339,  338,  337,  336,  334,  333,  358,
      375,  330,  324,  357,  359,  296,  376,  360,  290,  374,
      284,  283,  377,  378,  281,  278,  388,  273,  269,  268,
      385,  266,  384,  391,  391,  391,  392,  392,  393,  393,
      225,  222,  214,  212,  210,  209,  199,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  128,  119,  118,

      107,   92,   81,   80,   78,   77,   76,   65,   64,   31,
       21,   18,   13,    9,    5,    4,    3,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "dbsql.lx.l"
#define INITIAL 0
#line 2 "dbsql.lx.l"

/*
 * Copyright (C) 2001 FirstBase Software, Inc. All rights reserved.
 *
 * $Id: dbsql.lx.l,v 9.1 2001/01/12 22:51:55 john Exp $
 *
 * See the file LICENSE for conditions of use and distribution.
 *
 *
 * lexical analyzer stuff for dbsql
 */

#include "dbsql_e.h"

#undef NULL
#undef END
#undef FLOAT
#undef INTEGER 
#undef INTO
#undef MAX
#undef MIN
#undef NUMERIC

#include "dbsql_df.h"

#undef input
#undef unput

extern int yylval;
extern int yychar;
extern int lineno;			/* for tracing line number */
extern int i_cur;			/* current input location */
extern char *i_ptr;

extern FILE *infile;
extern int interactive;

int save_val;

static int INPUT();
static unput();
#define YY_INPUT(buf,result,max_size) \
	{ \
		int c = INPUT(); \
		result = (c == 0) ? YY_NULL : (buf[0] = c, 1); \
	}
#define COMMENT 1


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 60 "dbsql.lx.l"


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 391 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 818 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "dbsql.lx.l"
{lineno++; BEGIN INITIAL;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "dbsql.lx.l"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "dbsql.lx.l"
BEGIN COMMENT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "dbsql.lx.l"
return(ALL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "dbsql.lx.l"
return(AND);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "dbsql.lx.l"
return(ANY);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "dbsql.lx.l"
return(AS);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "dbsql.lx.l"
return(ASC);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "dbsql.lx.l"
return(AVG);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "dbsql.lx.l"
return(BETWEEN);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "dbsql.lx.l"
return(BY);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "dbsql.lx.l"
return(COUNT);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "dbsql.lx.l"
return(CREATE);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "dbsql.lx.l"
return(DESC);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "dbsql.lx.l"
return(DISTINCT);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "dbsql.lx.l"
return(DROP);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "dbsql.lx.l"
return(EXISTS);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "dbsql.lx.l"
return(FROM);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "dbsql.lx.l"
return(GROUP);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "dbsql.lx.l"
return(HAVING);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "dbsql.lx.l"
return(IN);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "dbsql.lx.l"
return(INDEX);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "dbsql.lx.l"
return(INTO);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "dbsql.lx.l"
return(IS);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "dbsql.lx.l"
return(LIKE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "dbsql.lx.l"
return(MAX);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "dbsql.lx.l"
return(MIN);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "dbsql.lx.l"
return(NOT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "dbsql.lx.l"
return(NULL);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "dbsql.lx.l"
return(OF);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "dbsql.lx.l"
return(ON);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "dbsql.lx.l"
return(OR);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "dbsql.lx.l"
return(ORDER);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "dbsql.lx.l"
return(SELECT);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "dbsql.lx.l"
return(SOME);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "dbsql.lx.l"
return(SUM);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "dbsql.lx.l"
return(TO);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "dbsql.lx.l"
return(VIEW);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "dbsql.lx.l"
return(WHERE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "dbsql.lx.l"
return(POWER);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "dbsql.lx.l"
return(ROUND);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "dbsql.lx.l"
return(TRUNC);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "dbsql.lx.l"
return(ABS);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "dbsql.lx.l"
return(LABEL);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "dbsql.lx.l"
return(LENGTH);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "dbsql.lx.l"
return(SUBSTR);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "dbsql.lx.l"
return(UPPER);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "dbsql.lx.l"
return(LOWER);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "dbsql.lx.l"
return(SUBLINE);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "dbsql.lx.l"
return(FORMFIELD);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "dbsql.lx.l"
return(HEADER);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "dbsql.lx.l"
return(FOOTER);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "dbsql.lx.l"
return(ODD);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "dbsql.lx.l"
return(EVEN);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "dbsql.lx.l"
return(SYSDATE);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "dbsql.lx.l"
return(OWNER);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "dbsql.lx.l"
return(UID);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "dbsql.lx.l"
return(GID);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "dbsql.lx.l"
return(MODE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "dbsql.lx.l"
return(yytext[0]);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "dbsql.lx.l"
return(linstall(CON));
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "dbsql.lx.l"
return(linstall(FCON));
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "dbsql.lx.l"
return(linstall(FCON));
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "dbsql.lx.l"
return(linstall(ID));
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "dbsql.lx.l"
return(linstall(SCON));
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "dbsql.lx.l"
return(linstall(SCON));
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "dbsql.lx.l"
return(AND);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "dbsql.lx.l"
return(NEQ);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "dbsql.lx.l"
return(NEQ);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "dbsql.lx.l"
return(LEQ);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "dbsql.lx.l"
return(GEQ);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "dbsql.lx.l"
return(OR);
	YY_BREAK
case 73:
#line 134 "dbsql.lx.l"
case 74:
#line 135 "dbsql.lx.l"
case 75:
YY_RULE_SETUP
#line 135 "dbsql.lx.l"
return(yytext[0]);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "dbsql.lx.l"
lineno++;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "dbsql.lx.l"
;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "dbsql.lx.l"
fprintf(stderr,"%s?\n",yytext);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "dbsql.lx.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 391 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 391 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 390);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 139 "dbsql.lx.l"


/*
 * linstall - lex install of constants into the symtable
 */

   linstall(t)
      int t;

      {
         if ((yylval = (int) lookup(yytext)) == 0)
            yylval = (int) sym_install(yytext);
         return(t);
      }

/*
 * input - the lex input function - reads from mem for speed
 */

#if FLEX
   int INPUT()
#else
   int input()
#endif /* FLEX */
      {
         char c;

         c = *i_ptr;
         if (c == '\0')
            return(0);
         i_ptr++;
         i_cur++;
         /*
         if (c == '\n')
            yylineno++;
         */
         return(c);
      }

/*
 * unput - the lex unput function - reads from mem for interactive, or file
 *	for script driven.
 */

   unput(c)
      char c;

      {
         i_cur--;
         if (i_cur >= 0)
            i_ptr--;
         *i_ptr = c;
         if (c == '\n')
            lineno--;
      }
