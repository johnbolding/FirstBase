.TH ADDREC 3 "12 September 1995"
.FB
.SH NAME
addrec, b_addrec \- add a record
.SH SYNOPSIS
#include <firstbase/fb.h>
.sp 1
fb_addrec(db)
.br
fb_database *db;
.sp 1
fb_b_addrec(db)
.br
fb_database *db;
.br
.SH DESCRIPTION
As explained in the \fIdatabase\fP(4)
manual page, a database structure contains
all of the elements needed for an entire database, including an array of
field structures, all file names and descriptors, and index information.
Altogether, the array of field structures can hold one complete record.
.PP
The field structures within the database structure may be updated by using
the \fIstore\fP(3)
routine. Once a record has been completely set up within the
array of field descriptors, the \fIfb_addrec\fP routine is called to physically
write the fields of data as a single record to the end of the database.
This new record is stored as physical record number \fIdb->reccnt\fP + 1.
.PP
\fIFb_addrec\fP will perform the following sequence of events:
.sp 1
.PD 0
.TP 3
1)
The database header variables \fIdb->reccnt\fP and \fIdb->delcnt\fP are read.
.TP 3
2)
The record count is bumped to \fIdb->reccnt\fP + 1 and the record is added to
the database using the \fIputrec\fP(3) routine.
.TP 3
3)
Autoindex fields that contain the AUTOINCR marker, the asterisk ("*"),
are resolved by incrementing the last value used in the autoindex.
.TP 3
4)
Any autoindexes in the database are updated to reflect this new record.
.TP 3
5)
The database header information is written back into the database.
.PD
.PP
Note that \fIfb_addrec\fP does not check for unique field
values. However, \fIcheckfields\fP(3).
can be used to enforce this integrity check.
.PP
But, \fIfb_addrec\fP does enforce mutual exclusion among any other
\fIFirstBase\fP database tools that are running at the same time.
In other words, a
record added to a database using \fIfb_addrec\fP will properly lock out all
other processes before actually adding the record.
.PP
Sometimes it is desirable to add many records as fast as possible.
Since \fIfb_addrec\fP will lock the database,
synchronize the data files, and unlock the database
for each record, it can be inefficient. The bulk record processing
mechanism can be used in these cases. (See \fIbulkrec\fP(3)).
.PP
The bulk processing of records consists of three steps. First,
\fIfb_bulkrec_begin\fP is called before any processing. This preliminary
call will lock and synchronize the database, and read the database header.
Then, \fIfb_b_addrec\fP and/or \fIfb_b_delrec\fP are called repeatedly,
as needed.
Finally, \fIfb_bulkrec_end\fP is used to write the header,
synchronize the data files, and unlock the database.
.SH CLIENT/SERVER
The \fIfb_addrec\fP and \fIfb_b_addrec\fP routines will transparently
make calls to \fIfb_addrec_clnt\fP and \fIfb_b_addrec_clnt\fP
when the global \fIFirstBase\fP variable \fIcdb_use_rpc\fP is set to one.
See \fIfb_clnt_create\fP(3) for more details.
.SH SEE ALSO
store(3), putrec(3), opendb(3), delrec(3), bulkrec(3), database(4).
.SH DIAGNOSTICS
\fIFb_addrec\fP will return FB_ERROR on failure,
and an FB_AOK on correct completion.
.br
